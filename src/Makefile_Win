# written by jxzou at 20200808: Makefile under Windows
#
# To use this Makefile, you need to install
#  (1) GNU Make for Windows; (2) Intel Parallel Studio
#  and set corresponding environment variables properly

BIN = ..\bin

# --- ifort ----
F90 = ifort
FFLAGS = /O2 /fpp /libs:static
MKL_FLAGS = /Qmkl:sequential

OBJ_bas_fch2py = file_op.obj rwwfn.obj util_wrapper.obj bas_fch2py.obj
OBJ_bas_gms2bdf = string_manipulate.obj read_gms_inp.obj read_fch.obj rwgeom.obj bas_gms2bdf.obj
OBJ_bas_gms2molcas = string_manipulate.obj read_gms_inp.obj bas_gms2molcas.obj
OBJ_bas_gms2molpro = string_manipulate.obj read_fch.obj rwgeom.obj read_gms_inp.obj bas_gms2molpro.obj
OBJ_bas_gms2py = string_manipulate.obj bas_gms2py.obj
OBJ_bdf2fch = rwwfn.obj file_op.obj bdf2fch.obj
OBJ_bdf2mkl = file_op.obj bdf2mkl.obj
OBJ_dat2fch = file_op.obj string_manipulate.obj read_fch.obj rwwfn.obj dat2fch.obj
OBJ_extract_noon2fch = file_op.obj extract_noon2fch.obj
OBJ_fch2bdf = rwwfn.obj util_wrapper.obj string_manipulate.obj read_gms_inp.obj \
              read_fch.obj rwgeom.obj mr_keyword.obj fch2bdf.obj
OBJ_fch2com = rwwfn.obj util_wrapper.obj string_manipulate.obj fch2com.obj
OBJ_fch2mkl = file_op.obj string_manipulate.obj read_fch.obj fch2mkl.obj
OBJ_fch2inp = file_op.obj string_manipulate.obj read_fch.obj fch2inp.obj
OBJ_fch2inporb = rwwfn.obj util_wrapper.obj fch2inporb.obj
OBJ_fch_u2r = file_op.obj fch_u2r.obj
OBJ_fch_mo_copy = rwwfn.obj fch_mo_copy.obj
OBJ_frag_guess_wfn = read_fch.obj rwgeom.obj rwwfn.obj string_manipulate.obj mr_keyword.obj frag_guess_wfn.obj
OBJ_mkl2fch = file_op.obj string_manipulate.obj rwwfn.obj read_fch.obj mkl2fch.obj
OBJ_orb2fch = file_op.obj rwwfn.obj orb2fch.obj
OBJ_xml2fch = file_op.obj rwwfn.obj xml2fch.obj

.PHONY: clean distclean bas_fch2py bas_gms2bdf bas_gms2molcas bas_gms2molpro \
        bas_gms2py bdf2fch bdf2mkl dat2fch extract_noon2fch fch2bdf fch2com \
        fch2mkl fch2inp fch2inporb fch_u2r fch_mo_copy frag_guess_wfn mkl2fch \
        orb2fch xml2fch solve_ON_matrix

%.obj: %.f90
	$(F90) /c $< -o $@ $(FFLAGS)

help:
	@echo  make [target], where the [target] could be
	@echo  help      : print the current information
	@echo  fch2bdf   : generate fch2bdf    (Gau-^>BDF)
	@echo  fch2com   : generate fch2com    (Gau-^>Molpro)
	@echo  fch2inp   : generate fch2inp    (Gau-^>GAMESS)
	@echo  fch2mkl   : generate fch2mkl    (Gau-^>ORCA)
	@echo  fch2inporb: generate fch2inporb (Gau-^>OpenMolcas)
	@echo  xx        : generate xx (xx is any utility)
	@echo  all       : all executables
	@echo  clean     : delete *.mod *.obj
	@echo  distclean : delete *.mod *.obj and clean ..\bin

bas_fch2py: $(OBJ_bas_fch2py)
	$(F90) $(OBJ_bas_fch2py) -o $(BIN)\bas_fch2py $(FFLAGS)
	@echo bas_fch2py requires utilities fch2inp and bas_gms2py, please also compile them

bas_gms2bdf: $(OBJ_bas_gms2bdf)
	$(F90) $(OBJ_bas_gms2bdf) -o $(BIN)\bas_gms2bdf $(FFLAGS)

bas_gms2molcas: $(OBJ_bas_gms2molcas)
	$(F90) $(OBJ_bas_gms2molcas) -o $(BIN)\bas_gms2molcas $(FFLAGS)

bas_gms2molpro: $(OBJ_bas_gms2molpro)
	$(F90) $(OBJ_bas_gms2molpro) -o $(BIN)\bas_gms2molpro $(FFLAGS)

bas_gms2py: $(OBJ_bas_gms2py)
	$(F90) $(OBJ_bas_gms2py) -o $(BIN)\bas_gms2py $(FFLAGS)

bdf2fch: $(OBJ_bdf2fch)
	$(F90) $(OBJ_bdf2fch) -o $(BIN)\bdf2fch $(FFLAGS)

bdf2mkl: $(OBJ_bdf2mkl)
	$(F90) $(OBJ_bdf2mkl) -o $(BIN)\bdf2mkl $(FFLAGS)

dat2fch: $(OBJ_dat2fch)
	ifort /c file_op.f90 -o file_op.obj $(FFLAGS)
	ifort /c string_manipulate.f90 -o string_manipulate.obj $(FFLAGS)
	ifort /c rwwfn.f90 -o rwwfn.obj $(FFLAGS)
	ifort /c read_fch.f90 -o read_fch.obj $(FFLAGS)
	ifort /c dat2fch.f90 -o dat2fch.obj $(FFLAGS) $(MKL_FLAGS)
	ifort file_op.obj string_manipulate.obj rwwfn.obj read_fch.obj dat2fch.obj -o $(BIN)\dat2fch $(FFLAGS) $(MKL_FLAGS)

fch2bdf: $(OBJ_fch2bdf)
	$(F90) $(OBJ_fch2bdf) -o $(BIN)\fch2bdf $(FFLAGS)
	@echo fch2bdf requires utilities fch2inp and bas_gms2bdf, please also compile them

fch2com: $(OBJ_fch2com)
	$(F90) $(OBJ_fch2com) -o $(BIN)\fch2com $(FFLAGS)
	@echo fch2com requires utilities fch2inp and bas_gms2molpro, please also compile them

fch2mkl: $(OBJ_fch2mkl)
	$(F90) $(OBJ_fch2mkl) -o $(BIN)\fch2mkl $(FFLAGS)

fch2inp: $(OBJ_fch2inp)
	$(F90) $(OBJ_fch2inp) -o $(BIN)\fch2inp $(FFLAGS)

fch2inporb: $(OBJ_fch2inporb)
	$(F90) $(OBJ_fch2inporb) -o $(BIN)\fch2inporb $(FFLAGS)
	@echo fch2inporb requires utilities fch2inp and bas_gms2molcas, please also compile them

fch_u2r: $(OBJ_fch_u2r)
	$(F90) $(OBJ_fch_u2r) -o $(BIN)\fch_u2r $(FFLAGS)

fch_mo_copy: $(OBJ_fch_mo_copy)
	$(F90) $(OBJ_fch_mo_copy) -o $(BIN)\fch_mo_copy $(FFLAGS)

frag_guess_wfn: $(OBJ_frag_guess_wfn)
	$(F90) $(OBJ_frag_guess_wfn) -o $(BIN)\frag_guess_wfn $(FFLAGS)

mkl2fch: $(OBJ_mkl2fch)
	$(F90) $(OBJ_mkl2fch) -o $(BIN)\mkl2fch $(FFLAGS)

extract_noon2fch: $(OBJ_extract_noon2fch)
	$(F90) $(OBJ_extract_noon2fch) -o $(BIN)\extract_noon2fch $(FFLAGS)

orb2fch: $(OBJ_orb2fch)
	$(F90) $(OBJ_orb2fch) -o $(BIN)\orb2fch $(FFLAGS)

xml2fch: $(OBJ_xml2fch)
	$(F90) $(OBJ_xml2fch) -o $(BIN)\xml2fch $(FFLAGS)

solve_ON_matrix:
	ifort /c rwwfn.f90 -o rwwfn.obj $(FFLAGS)
	ifort /c solve_ON_matrix.f90 -o solve_ON_matrix.obj $(FFLAGS) $(MKL_FLAGS)
	ifort rwwfn.obj solve_ON_matrix.obj -o $(BIN)\solve_ON_matrix $(FFLAGS) $(MKL_FLAGS)

all: bas_fch2py bas_gms2bdf bas_gms2molcas bas_gms2molpro bas_gms2py bdf2fch \
     bdf2mkl dat2fch extract_noon2fch fch2bdf fch2com fch2mkl fch2inp fch2inporb \
     fch_u2r fch_mo_copy frag_guess_wfn mkl2fch orb2fch xml2fch solve_ON_matrix

clean:
	del *.obj *.mod

distclean:
	del *.obj *.mod ..\bin\*

