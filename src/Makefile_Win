# written by jxzou at 20200808: Makefile under Windows
#
# To use this Makefile, you need to install
#  (1) GNU Make for Windows; (2) Intel Parallel Studio
#  and set corresponding environment variables properly

BIN = ..\bin

# --- gfortran ---
#F90 = gfortran
#FFLAGS = -O2

# --- ifort ----
F90 = ifort
FFLAGS = /O2 /fpp /libs:static

OBJ_bas_fch2py = rwwfn.obj util_wrapper.obj bas_fch2py.obj
OBJ_bas_gms2molcas = bas_gms2molcas.obj
OBJ_bas_gms2py = bas_gms2py.obj
OBJ_dat2fch = rwwfn.obj dat2fch.obj
OBJ_extract_noon2fch = extract_noon2fch.obj
OBJ_fch2mkl = read_fch.obj fch2mkl.obj
OBJ_fch2inp = read_fch.obj fch2inp.obj
OBJ_fch2inporb = rwwfn.obj util_wrapper.obj fch2inporb.obj
OBJ_fch_u2r = fch_u2r.obj
OBJ_fch_mo_copy = rwwfn.obj fch_mo_copy.obj
OBJ_mkl2fch = rwwfn.obj read_fch.obj mkl2fch.obj
OBJ_orb2fch = rwwfn.obj orb2fch.obj

.PHONY: clean distclean bas_fch2py bas_gms2molcas bas_gms2py dat2fch extract_noon2fch \
        fch2mkl fch2inp fch2inporb fch_u2r fch_mo_copy mkl2fch orb2fch solve_ON_matrix

%.obj: %.f90
	$(F90) /c $< -o $@ $(FFLAGS)

help:
	@echo  make [target], where the [target] could be
	@echo  help      : print the current information
	@echo  fch2inp   : generate fch2inp
	@echo  fch2mkl   : generate fch2mkl
	@echo  xx        : generate xx (xx is any utility)
	@echo  all       : all executables
	@echo  clean     : delete *.mod *.obj
	@echo  distclean : delete *.mod *.obj and clean ..\bin

bas_fch2py: $(OBJ_bas_fch2py)
	$(F90) $(OBJ_bas_fch2py) -o $(BIN)\bas_fch2py $(FFLAGS)
	@echo bas_fch2py requires modules fch2inp and bas_gms2py, so compile them if they haven't been compiled

bas_gms2molcas: $(OBJ_bas_gms2molcas)
	$(F90) $(OBJ_bas_gms2molcas) -o $(BIN)\bas_gms2molcas $(FFLAGS)

bas_gms2py: $(OBJ_bas_gms2py)
	$(F90) $(OBJ_bas_gms2py) -o $(BIN)\bas_gms2py $(FFLAGS)

dat2fch: $(OBJ_dat2fch)
	$(F90) $(OBJ_dat2fch) -o $(BIN)\dat2fch $(FFLAGS)

fch2mkl: $(OBJ_fch2mkl)
	$(F90) $(OBJ_fch2mkl) -o $(BIN)\fch2mkl $(FFLAGS)

fch2inp: $(OBJ_fch2inp)
	$(F90) $(OBJ_fch2inp) -o $(BIN)\fch2inp $(FFLAGS)

fch2inporb: $(OBJ_fch2inporb)
	$(F90) $(OBJ_fch2inporb) -o $(BIN)\fch2inporb $(FFLAGS)
	@echo fch2inporb requires modules fch2inp and bas_gms2molcas, so compile them if they haven't been compiled

fch_u2r: $(OBJ_fch_u2r)
	$(F90) $(OBJ_fch_u2r) -o $(BIN)\fch_u2r $(FFLAGS)

fch_mo_copy: $(OBJ_fch_mo_copy)
	$(F90) $(OBJ_fch_mo_copy) -o $(BIN)\fch_mo_copy $(FFLAGS)

mkl2fch: $(OBJ_mkl2fch)
	$(F90) $(OBJ_mkl2fch) -o $(BIN)\mkl2fch $(FFLAGS)

extract_noon2fch: $(OBJ_extract_noon2fch)
	$(F90) $(OBJ_extract_noon2fch) -o $(BIN)\extract_noon2fch $(FFLAGS)

orb2fch: $(OBJ_orb2fch)
	$(F90) $(OBJ_orb2fch) -o $(BIN)\orb2fch $(FFLAGS)

solve_ON_matrix:
	ifort /c rwwfn.f90 -o rwwfn.obj
	ifort /c solve_ON_matrix.f90 /Qmkl:sequential -o solve_ON_matrix.obj
	ifort rwwfn.obj solve_ON_matrix.obj /Qmkl:sequential -o $(BIN)\solve_ON_matrix

all: bas_fch2py bas_gms2molcas bas_gms2py dat2fch extract_noon2fch fch2mkl \
     fch2inp fch2inporb fch_u2r fch_mo_copy mkl2fch orb2fch solve_ON_matrix

clean:
	del *.obj *.mod

distclean:
	del *.obj *.mod ..\bin\*

